[object:full_graphics]
#
# Terminology.
#   TILE refers to and only to logical tiles the map is composed from,
#        with the exception of TILE_PAGE which is deemed same as CEL_PAGE.
#        These are walls, floors, open space, etc.
#	 Tile names are taken from df/tiletype.h (xml/df.tile-types.xml)
#
#   CEL refers to and only to a graphical representation, be it a single
#        image or an animated sequence.
# 
#
# 'std' is the name of predefined 16x16 'font'
# anything after coordinates is considered effects
#
# Tile definition token [tile:<tile name>[:<cel def>]]
#   permitted tokens under it: [cel]
#   
# Cel definition token:
#   [cel:none] - do not draw anything there (open space, etc.)  
#   [cel:<inline celdef>] - where <inline celdef> is 
#        <celref>[:<effect>] is a shortcut for 
#     [cel]
#       [blit:<celref>]
#       [blend:MAT:<effect>]
#
#   permitted tokens under it: [blit] [blend] [glow] [key]
#
# [blit:<celref>] blits given cel with current frame's blend or glow settings
# Celref is one of:
#  [blit:<pagename>:<celdefname>] - refers to an alias defined in [tilepage]
#  [blit:<pagename>:<index>] - cel by index
#  [blit:<pagename>:<s>:<t>] - cel by column, row
#  [blit:none]   - don't blit anything (same as omitting [blit] for the keyframe)
#
# [blend:<colordef>] mixes given color with cel being blitted this frame.
#  Colordef is one of:
#
#  [blend:rgb] 
#  [blend:rgb] 
#  [blend:rrggbb]
#    where r, g and b are single-character hex numbers. Same as in CSS.
#    blending here is plain multiplication: color * tile_color
#
#  [blend:rgb:rgb] 
#  [blend:rrggbb:rrggbb]
#  [blend:fg:bg:br] - classic color triplet looked up in data/init/colors.txt
#  These work just like the original renderers, namely:
#       color = mix(tile_color * fg, bg, 1.0 - tile_color.a)
#  basically, the 'background' color 'shines through' translucent/transparent
#  parts of the tile, while tile's own color is multiplied by 'foreground' color.
#
#  [blend:mat] - uses material's DISPLAY_COLOR triplet. This is implied.
#  [blend:none] - Blits the cel as is.
#
#  [glow] Both this and next keyframe must have non-none and different blend 
#  defined. Linearly interpolates blend color for each frame in between, 
#  for both fore and background colors. Blit is replicated from this frame.
#  (possibly add alpha interpolation for blit)
#
#  [key:<frameno>] signals that instructions following this token refer to 
#  key frame number <frameno>. [key:0] is implicitly inserted at the start 
#  of the celdef. Final keyframe definition that consists of single [key]
#  token loops back to the zeroeth frame. 
#
# [key:0][blit:...][blend:...]
# [key:2][blit:...][blend:...]
# [key:4][blit:...][blend:...][glow]
# [key:6] <- assume it's [key:0], glow frame 4 in 6-4 = two frames to frame 0's blend.
#
# currently supported effect tokens:
#
# [color:<tr,ipl,et>] - classic fg,bg,br. 
#  Use either numbers, or fg,bg,br literals,
#  they stand for material's DISPLAY_COLOR values
#  see tilesets.txt for examples. 
# 
#
# Binding cels to tiles and materials.
# ====================================
# 
# [material:selector-expression] token applies materials selected 
# by the ~selector-expression~ to the tilesets listed after the token.
#
# In other words, for each selected material and every tile
# in the listed tilesets a blitter instruction is emitted, so that
# when the renderer gets a tile_id, material_id pair from the game
# it knows how to draw it. While some ascii cels are listed in the 
# raws, they basically only cover unmined walls while there are 
# many other tiles to be drawn.
#
# A material is a set of "material template tokens", that is those
# tokens that can be added/found in material templates 
# (material_template_default.txt file)
#
# The material.parent variable refers to the object from which 
# the material in question was derived. It is not defined for 
# the inorganic materials. Instead they have inorganic-specific
# tokens
#
#
#  ~selector-expression~:
#  ----------------------
#
#    A simple expression in reverse polish notation (stoned-yoda-speak).
#    It must compute to a boolean value or consist of a single keyword 'none'.
#
# Operators:
#     and or not 
#     eq  - case insensitive string comparison
#     in  - a:b:in -> a in b -> b.has(a)
#
# Variables:
#     name:                 (alias)
#         mat                      - set of tokens (f.ex. to select metals)
#         mat.klass         (mk)   - inorganic; none; structural, seed, etc for derived
#         mat.name          (mn)   - name
#         mat.parent        (mp)   - set of tokens for the parent object (GRASS f.ex.)
#         mat.parent.klass  (mpk)  - plant or creature
#
# Keywords:
#     none: 
#         expilicty selects built-in material 'nonemat' (see below)
#
# Literals:
#    anything that is not a varname, keyword or operator.
#
#    Example: 
#      [material:mat.klass:seed:eq:mat.name:weed_rat:eq:and][tile:EeriePit]
#    an EeriePit made of rat weed seeds
#
# Beware of typos: evaluator lacks type-checks and will happily coerce 
# strings to booleans and search for substrings
# 
# 'in' and 'eq' operators can be made implicit since one 
#  of their parameters is always a variable (or rather variables
#  can be turned into unary operators), but I feel that would 
#  make the expressions incomprehensible even to me.
#
#
# [material:none] works as a 'fallback' for tile-material 
#  combinations that are not defined otherwise. 
#  If renderer can not find blitcode for given mat-tile 
#  combo, it tries to look up nonemat-tile combination. 
#
#  This is intended for drawing tiles where having a material
#  assigned doesn't make much sense, like OpenSpace, Void, 
#  EeriePit and the like.
#
#
#
# The following tokens are permitted under [material]:
#     [tilesets:<tsname>:<tsname>...]
#     [tile:<literal_tilename>[:<cel-def>]] (as in tileset def)
#     [buildings]
#
#
# Buildings definition: 
# =====================
#
#       see buildings.txt
#

[material:soil:mat:in:soil_ocean:mat:in:or]
    [tilesets:soil]

[material:is_gem:mat:in:not:metamorphic:mat:in:sedimentary:mat:in:or:igneous_intrusive:mat:in:or:igneous_extrusive:mat:in:or:and]
    [tilesets:stone:constructed]
    [buildings]

[material:is_gem:mat:in:not:environment_spec:mat:in:environment:mat:in:or:and]
    [tilesets:mineral:constructed]
    [buildings]

[material:deep_special:mat:in:is_stone:mat:in:and] # raw adamantine
    [tilesets:mineral]

[material:deep_surface:mat:in] # slade
    [tilesets:feature]

[material:is_metal:mat:in]
    [tilesets:constructed]
    [buildings]
 
[material:wood:mat.klass:eq]
    [tilesets:constructed]
    [buildings]

[material:soap:mat.klass:eq]
    [tilesets:constructed]
    [buildings]

[material:is_gem:mat:in]
    [tilesets:mineral]

[material:grass:mat.parent:in]
    [tilesets:grass]

[material:mat.klass:structural:eq:mat.parent.klass:plant:eq:and:grass:mat.parent:in:not:and]
    [tilesets:vegetation]

[tileset:nonmat]
    [tile:Ashes1][cel:std:2:15]
    [tile:Ashes2][cel:std:3:15]
    [tile:Ashes3][cel:std:3:15]
    [tile:Campfire][cel:std:0:0]
    [tile:Chasm][cel:none]
    [tile:Driftwood][cel:std:0:15]
    [tile:EeriePit][cel:std:0:0]
    [tile:Fire][cel:std:0:0]
    [tile:GlowingBarrier][cel:std:0:0]
    [tile:GlowingFloor][cel:std:0:0]
    [tile:MagmaFlow][cel:std:0:0]
    [tile:MurkyPool][cel:std:0:0]
    [tile:OpenSpace][cel:none]
    [tile:RampTop][cel:none]
    [tile:SemiMoltenRock][cel:std:0:11]
    [tile:Void][cel:none]
    [tile:Waterfall][cel:none]

[material:mk:none:eq]
    [tilesets:nonmat]


